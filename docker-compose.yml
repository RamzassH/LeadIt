version: '3.8'

networks:
  app_net:
    driver: bridge

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${KAFKA_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
    depends_on:
      - zookeeper

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3

  authdb:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${AUTH_DB_NAME}
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    ports:
      - "${AUTH_DB_PORT}:${POSTGRESQL_PORT}"

  auth-service:
    build:
      dockerfile: ./authService/Dockerfile
      context: .
    restart: always
    depends_on:
      - authdb
      - redis
    environment:
      ENV: ${ENV}
      GRPC_PORT: ${AUTH_GRPC_PORT}
      DATABASE_DSN: ${AUTH_DATABASE_DSN}
      TOKEN_TTL: ${TOKEN_TTL}
      CONFIG_PATH: "/app/config/config.yaml"
      REFRESH_TOKEN_TTL: ${REFRESH_TOKEN_TTL}
    volumes:
      - ./authService/config:/app/config
    ports:
      - "${AUTH_GRPC_PORT}:${AUTH_GRPC_PORT}"

  organizationdb:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${ORGANIZATION_DB_NAME}
    volumes:
      - organization_db_data:/var/lib/postgresql/data
    ports:
      - "${ORGANIZATION_DB_PORT}:${POSTGRESQL_PORT}"

  organization-service:
    build:
      dockerfile: ./organizationService/Dockerfile
    restart: always
    depends_on:
      - organizationdb
      - redis
    environment:
      ENV: ${ENV}
      GRPC_PORT: ${ORGANIZATION_GRPC_PORT}
      DATABASE_DSN: ${ORGANIZATION_DATABASE_DSN}
    volumes:
      - ./organizationService/config:/app/config
    ports:
      - "${ORGANIZATION_GRPC_PORT}:${ORGANIZATION_GRPC_PORT}"

  notification-service:
    build:
      dockerfile: ./notificationService/Dockerfile
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_PORT}"
      - "${NOTIFICATION_SERVICE_HEALTH_PORT}:${NOTIFICATION_SERVICE_HEALTH_PORT}"
    depends_on:
      kafka:
        condition: service_started

  gateway:
    build:
      dockerfile: ./gateway/Dockerfile
    restart: always
    depends_on:
      auth-service:
        condition: service_started
      organization-service:
        condition: service_started
    environment:
      AUTH_GRPC_SERVER_ADDRESS: "auth-service:${AUTH_GRPC_PORT}"
      ORGANIZATION_GRPC_SERVER_ADDRESS: "organization-service:${ORGANIZATION_GRPC_PORT}"
      HTTP_PORT: "${GATEWAY_PORT}"
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"

volumes:
  organization_db_data:
  auth_db_data:
  redis_data: