// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: fileStorage/fileStorage.proto

package fileStoragev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileStorage_UploadFileChunk_FullMethodName = "/fileStorage.FileStorage/uploadFileChunk"
)

// FileStorageClient is the client API for FileStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileStorageClient interface {
	UploadFileChunk(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileChunkRequest, UploadFileResponse], error)
}

type fileStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewFileStorageClient(cc grpc.ClientConnInterface) FileStorageClient {
	return &fileStorageClient{cc}
}

func (c *fileStorageClient) UploadFileChunk(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileChunkRequest, UploadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileStorage_ServiceDesc.Streams[0], FileStorage_UploadFileChunk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadFileChunkRequest, UploadFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileStorage_UploadFileChunkClient = grpc.ClientStreamingClient[UploadFileChunkRequest, UploadFileResponse]

// FileStorageServer is the server API for FileStorage service.
// All implementations must embed UnimplementedFileStorageServer
// for forward compatibility.
type FileStorageServer interface {
	UploadFileChunk(grpc.ClientStreamingServer[UploadFileChunkRequest, UploadFileResponse]) error
	mustEmbedUnimplementedFileStorageServer()
}

// UnimplementedFileStorageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileStorageServer struct{}

func (UnimplementedFileStorageServer) UploadFileChunk(grpc.ClientStreamingServer[UploadFileChunkRequest, UploadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFileChunk not implemented")
}
func (UnimplementedFileStorageServer) mustEmbedUnimplementedFileStorageServer() {}
func (UnimplementedFileStorageServer) testEmbeddedByValue()                     {}

// UnsafeFileStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileStorageServer will
// result in compilation errors.
type UnsafeFileStorageServer interface {
	mustEmbedUnimplementedFileStorageServer()
}

func RegisterFileStorageServer(s grpc.ServiceRegistrar, srv FileStorageServer) {
	// If the following call pancis, it indicates UnimplementedFileStorageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileStorage_ServiceDesc, srv)
}

func _FileStorage_UploadFileChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileStorageServer).UploadFileChunk(&grpc.GenericServerStream[UploadFileChunkRequest, UploadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileStorage_UploadFileChunkServer = grpc.ClientStreamingServer[UploadFileChunkRequest, UploadFileResponse]

// FileStorage_ServiceDesc is the grpc.ServiceDesc for FileStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileStorage.FileStorage",
	HandlerType: (*FileStorageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "uploadFileChunk",
			Handler:       _FileStorage_UploadFileChunk_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "fileStorage/fileStorage.proto",
}
